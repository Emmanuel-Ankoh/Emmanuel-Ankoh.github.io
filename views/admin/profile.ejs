<%- include('../partials/head', { title }) %>
<main id="main" class="container">
  <h1>Profile</h1>
  <% if (error) { %><div class="alert error"><%= error %></div><% } %>
  <% if (success) { %><div class="alert success"><%= success %></div><% } %>
  <form method="POST" action="/admin/profile" enctype="multipart/form-data" class="contact-form" style="max-width:720px">
    <div class="grid" style="grid-template-columns:1fr 1fr;gap:1rem">
      <div>
        <label>Primary CTA Text</label>
        <input name="homeCtaPrimaryText" value="<%= settings && settings.homeCta && settings.homeCta.primaryText || '' %>" />
      </div>
      <div>
        <label>Primary CTA URL</label>
        <input name="homeCtaPrimaryUrl" value="<%= settings && settings.homeCta && settings.homeCta.primaryUrl || '' %>" />
      </div>
      <div>
        <label>Secondary CTA Text</label>
        <input name="homeCtaSecondaryText" value="<%= settings && settings.homeCta && settings.homeCta.secondaryText || '' %>" />
      </div>
      <div>
        <label>Secondary CTA URL</label>
        <input name="homeCtaSecondaryUrl" value="<%= settings && settings.homeCta && settings.homeCta.secondaryUrl || '' %>" />
      </div>
    </div>
    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
    <label>Name</label>
    <input name="name" value="<%= settings && settings.name || '' %>" required />
    <label>Headline</label>
    <input name="headline" value="<%= settings && settings.headline || '' %>" required />
    <label>Summary</label>
    <textarea name="summary" rows="5" required><%= settings && settings.summary || '' %></textarea>
    <div class="grid" style="grid-template-columns:120px 1fr;gap:1rem;align-items:center">
      <div>
        <img id="avatar-preview" src="<%= (settings && settings.avatarUrl) || '/images/placeholder.svg' %>" alt="Current avatar" style="width:100px;height:100px;border-radius:50%;object-fit:cover;border:1px solid var(--border)" />
      </div>
      <div>
        <label>Avatar</label>
        <div style="display:flex;gap:.5rem;align-items:center;flex-wrap:wrap">
          <input id="avatar-input" type="file" name="avatar" accept="image/*" style="display:none" />
          <button type="button" class="btn" id="choose-avatar">Choose Image</button>
          <span id="avatar-filename" style="color:var(--muted)">No file chosen</span>
          <button type="submit" class="btn" name="do" value="uploadAvatar">Upload Avatar</button>
        </div>
        <small>Max 5MB. JPG/PNG/WebP recommended.</small>
      </div>
    </div>
    <label>Resume URL</label>
    <input name="resumeUrl" value="<%= settings && settings.resumeUrl || '' %>" />
    <label>Contact Intro</label>
    <input name="contactIntro" value="<%= settings && settings.contactIntro || '' %>" />
    <fieldset style="border:1px solid var(--border);padding:1rem;border-radius:.5rem">
      <legend>Social Links</legend>
      <div class="grid" style="grid-template-columns:1fr 1fr;gap:1rem">
        <div>
          <label>GitHub</label>
          <input name="socials.github" value="<%= settings && settings.socials && settings.socials.github || '' %>" />
        </div>
        <div>
          <label>LinkedIn</label>
          <input name="socials.linkedin" value="<%= settings && settings.socials && settings.socials.linkedin || '' %>" />
        </div>
        <div>
          <label>Twitter</label>
          <input name="socials.twitter" value="<%= settings && settings.socials && settings.socials.twitter || '' %>" />
        </div>
        <div>
          <label>Email</label>
          <input name="socials.email" value="<%= settings && settings.socials && settings.socials.email || '' %>" />
        </div>
      </div>
    </fieldset>

  <label>About Body</label>
  <div id="about-editor" style="min-height:180px;background:var(--card);border:1px solid var(--border);border-radius:.5rem"></div>
  <textarea name="aboutBody" rows="6" style="display:none"><%= settings && settings.aboutBody || '' %></textarea>
    <fieldset style="border:1px solid var(--border);padding:1rem;border-radius:.5rem;margin-top:1rem">
      <legend>Timeline</legend>
      <small>One item per row. Format: year | title | subtitle | description (or just description).</small>
      <div id="timeline-list" class="repeater" style="display:flex;flex-direction:column;gap:.5rem;margin-top:.5rem"></div>
      <div>
        <button type="button" class="btn" id="add-timeline-item">Add timeline item</button>
      </div>
      <textarea name="timelineText" style="display:none"><%=(Array.isArray(settings && settings.timeline) ? (settings.timeline.map(function(it){
        var parts=[]; if (it.year) parts.push(it.year); if (it.title) parts.push(it.title); if (it.subtitle) parts.push(it.subtitle); if (it.description) parts.push(it.description);
        return parts.join(' | ');
      }).join('\n')) : '') %></textarea>
    </fieldset>

    <fieldset style="border:1px solid var(--border);padding:1rem;border-radius:.5rem;margin-top:1rem">
      <legend>Skills</legend>
      <small>One skill per row. Format: Name:Level (0-100) or Name (Level%).</small>
      <div id="skills-list" class="repeater" style="display:flex;flex-direction:column;gap:.5rem;margin-top:.5rem"></div>
      <div>
        <button type="button" class="btn" id="add-skill-item">Add skill</button>
      </div>
      <textarea name="skillsText" style="display:none"><%=(Array.isArray(settings && settings.skills) ? (settings.skills.map(function(s){
        var lvl = (typeof s.level === 'number' ? s.level : '');
        return (s.name || '') + (lvl!=='' ? (':' + lvl) : '');
      }).join('\n')) : '') %></textarea>
    </fieldset>
    <link href="https://cdn.quilljs.com/1.3.7/quill.snow.css" rel="stylesheet">
    <script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>
    <script>
      (function(){
        const form = document.currentScript.closest('form');
        const aboutEditor = document.getElementById('about-editor');
        const aboutTextarea = form.querySelector('textarea[name="aboutBody"]');
        if (aboutEditor && window.Quill) {
          const quill = new Quill(aboutEditor, {
            theme: 'snow',
            modules: { toolbar: [['bold','italic','underline','strike'],[{header:[1,2,3,false]}],[{list:'ordered'},{list:'bullet'}],['blockquote','code-block'],['link'],['clean']] }
          });
          quill.root.innerHTML = aboutTextarea.value || '';
          form.addEventListener('submit', ()=>{ aboutTextarea.value = quill.root.innerHTML; });
        }
      })();
    </script>
    <script>
      (function(){
        const form = document.currentScript.closest('form');
        // Avatar live preview
        const avatarInput = form.querySelector('#avatar-input');
        const avatarImg = form.querySelector('#avatar-preview');
        const chooseBtn = form.querySelector('#choose-avatar');
        const fileName = form.querySelector('#avatar-filename');
        if (chooseBtn && avatarInput) {
          chooseBtn.addEventListener('click', ()=> avatarInput.click());
        }
        if (avatarInput && avatarImg) {
          avatarInput.addEventListener('change', function(){
            const f = this.files && this.files[0];
            if (!f) return;
            if (fileName) fileName.textContent = f.name;
            const reader = new FileReader();
            reader.onload = e => { avatarImg.src = e.target.result; };
            reader.readAsDataURL(f); // data: URL works with current CSP
          });
        }
        // Timeline repeater
        const timelineList = form.querySelector('#timeline-list');
        const timelineHidden = form.querySelector('textarea[name="timelineText"]');
        const addTimelineBtn = form.querySelector('#add-timeline-item');
        function makeRow(value){
          const row = document.createElement('div');
          row.style.display='flex'; row.style.gap='.5rem';
          const input = document.createElement('input');
          input.type='text'; input.placeholder='year | title | subtitle | description'; input.style.flex='1';
          if (value) input.value = value;
          const remove = document.createElement('button'); remove.type='button'; remove.textContent='Remove'; remove.className='btn';
          remove.addEventListener('click', ()=>{ row.remove(); });
          row.appendChild(input); row.appendChild(remove);
          return row;
        }
        function loadFromHidden(){
          timelineList.innerHTML='';
          const lines = (timelineHidden.value || '').split(/\r?\n/).map(l=>l.trim()).filter(Boolean);
          if (!lines.length) { timelineList.appendChild(makeRow('')); }
          else { lines.forEach(l=> timelineList.appendChild(makeRow(l))); }
        }
        addTimelineBtn.addEventListener('click', ()=> timelineList.appendChild(makeRow('')));
        // Skills repeater
        const skillsList = form.querySelector('#skills-list');
        const skillsHidden = form.querySelector('textarea[name="skillsText"]');
        const addSkillBtn = form.querySelector('#add-skill-item');
        function makeSkillRow(value){
          const row = document.createElement('div');
          row.style.display='flex'; row.style.gap='.5rem';
          const input = document.createElement('input');
          input.type='text'; input.placeholder='Name:Level or Name (Level%)'; input.style.flex='1';
          if (value) input.value = value;
          const remove = document.createElement('button'); remove.type='button'; remove.textContent='Remove'; remove.className='btn';
          remove.addEventListener('click', ()=>{ row.remove(); });
          row.appendChild(input); row.appendChild(remove);
          return row;
        }
        function loadSkillsFromHidden(){
          skillsList.innerHTML='';
          const lines = (skillsHidden.value || '').split(/\r?\n/).map(l=>l.trim()).filter(Boolean);
          if (!lines.length) { skillsList.appendChild(makeSkillRow('')); }
          else { lines.forEach(l=> skillsList.appendChild(makeSkillRow(l))); }
        }
        // Serialize on submit
        form.addEventListener('submit', ()=>{
          const tlValues = Array.from(timelineList.querySelectorAll('input[type="text"]')).map(i=>i.value.trim()).filter(Boolean);
          timelineHidden.value = tlValues.join('\n');
          const skValues = Array.from(skillsList.querySelectorAll('input[type="text"]')).map(i=>i.value.trim()).filter(Boolean);
          skillsHidden.value = skValues.join('\n');
        });
        // Init
        loadFromHidden();
        loadSkillsFromHidden();
      })();
    </script>

    
    <div class="toolbar">
      <div></div>
      <button class="btn btn-primary" type="submit">Save</button>
    </div>
  </form>
</main>
<%- include('../partials/footer') %>
